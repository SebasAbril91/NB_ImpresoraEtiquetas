/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.make.impresoraetiquetas;

import java.awt.Font;
import java.awt.Image;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Calendar;
import javax.print.Doc;
import javax.print.DocFlavor;
import javax.print.DocPrintJob;
import javax.print.PrintException;
import javax.print.PrintService;
import javax.print.PrintServiceLookup;
import javax.print.SimpleDoc;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;

/**
 *
 * @author Sebas Abril
 */
public class InterfazImpresion extends javax.swing.JFrame {

    private int numLineasInfoEnvio = 0;
    private int numLineasInfoCont = 0;

    /**
     * Creates new form InterfazImpresion
     */
    public InterfazImpresion() {
        initComponents();
        cargarConfiguracionInicial();
    }

    private void cargarConfiguracionInicial() {
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        String ACTION_KEY = "autocompletar histInfoCont";
        KeyStroke evento = KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, InputEvent.CTRL_DOWN_MASK);
        txtInfoCont.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(evento, ACTION_KEY);
        txtInfoCont.getActionMap().put(ACTION_KEY, new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                txtCoincidenciaHistMouseClicked(null);
            }
        });

        SwingUtilities.invokeLater(() -> {
            // Lista todos los drivers de impresoras instaladas en el OS.
            PrintService[] ps = PrintServiceLookup.lookupPrintServices(null, null);
            for (PrintService impresora : ps) {
                cmbDriverImpresora.addItem(impresora.getName());
            }
            // Recupera y selecciona el ultimo driver utilizado.
            if (APP.configInit.nombreImpresora != null) {
                cmbDriverImpresora.setSelectedItem(APP.configInit.nombreImpresora);
            }
            if (APP.configInit.informacionContenido != null) {
                txtInfoCont.setText(APP.configInit.informacionContenido);
            }
        });
    }

    @Override
    public Image getIconImage() {
        Image retValue = Toolkit.getDefaultToolkit().getImage(this.getClass().getClassLoader().getResource("com/make/impresoraetiquetas/resources/logo1.png"));
        return retValue;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbDriverImpresora = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMasInformacion = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        txtCodigoBarras = new javax.swing.JTextField();
        JBtImprimir = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txtCiudad = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtProvincia = new javax.swing.JTextField();
        btnCerrar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInfoCont = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();
        ckbLogoEnvioFragil = new javax.swing.JCheckBox();
        ckbCodigoBarras = new javax.swing.JCheckBox();
        ckbFechaEnvio = new javax.swing.JCheckBox();
        txtCoincidenciaHist = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Etiqueta de envío");
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cmbDriverImpresora.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONAR IMPRESORA" }));
        cmbDriverImpresora.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDriverImpresoraItemStateChanged(evt);
            }
        });

        txtMasInformacion.setColumns(20);
        txtMasInformacion.setRows(5);
        jScrollPane1.setViewportView(txtMasInformacion);

        jLabel2.setText("Codigo de Barras:");

        txtCodigoBarras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCodigoBarrasKeyTyped(evt);
            }
        });

        JBtImprimir.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        JBtImprimir.setText("Imprimir");
        JBtImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtImprimirActionPerformed(evt);
            }
        });

        jLabel3.setText("Nombre:");

        jLabel4.setText("Direccion:");

        jLabel6.setText("Ciudad:");

        jLabel7.setText("Telefono:");

        jLabel8.setText("Email:");

        jLabel9.setText("Mas información:");

        txtCiudad.setActionCommand("null");

        jLabel10.setText("Provincia:");

        btnCerrar.setText("Cerrar");
        btnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCerrarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        txtInfoCont.setColumns(20);
        txtInfoCont.setRows(5);
        txtInfoCont.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtInfoContKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(txtInfoCont);

        jLabel11.setText("Contenido/Remitente:");

        ckbLogoEnvioFragil.setSelected(true);
        ckbLogoEnvioFragil.setText("Logo envío FRAGIL");

        ckbCodigoBarras.setSelected(true);
        ckbCodigoBarras.setText("Código de barras");

        ckbFechaEnvio.setSelected(true);
        ckbFechaEnvio.setText("Fecha de envío");

        txtCoincidenciaHist.setEditable(false);
        txtCoincidenciaHist.setFocusable(false);
        txtCoincidenciaHist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtCoincidenciaHistMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(JBtImprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCerrar))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbDriverImpresora, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel10)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtCodigoBarras))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtDireccion)
                                    .addComponent(txtNombre)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel11)
                                            .addComponent(ckbFechaEnvio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(ckbLogoEnvioFragil, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addComponent(ckbCodigoBarras, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(txtCoincidenciaHist))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cmbDriverImpresora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtTelefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtCodigoBarras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtProvincia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCoincidenciaHist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ckbLogoEnvioFragil)
                            .addComponent(ckbCodigoBarras))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ckbFechaEnvio))
                    .addComponent(jScrollPane1))
                .addGap(18, 30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(JBtImprimir)
                    .addComponent(btnCerrar)
                    .addComponent(btnLimpiar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBtImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtImprimirActionPerformed
        // Guardo en el historial de informacion de contenido el texto del 
        // JText informacion de contenido.
        if (!APP.configInit.histInfoCont.contains(txtInfoCont.getText())) {
            APP.configInit.histInfoCont.add(txtInfoCont.getText());
        }

        String impresora = cmbDriverImpresora.getSelectedItem().toString();
        PrintService printService = findPrintService(impresora);
        //https://stackoverflow.com/questions/13040822/unicode-characters-on-zpl-printer
        //ZPL CODDE
        // Ajuste de posicion de etiqueta (Plantilla).
        Point posInicialXY = new Point(102, 13);
        String plantilla = "^XA\n"
                + "^LH0,0"
                + "^FX Plantilla (IMAGEN).\n"
                + "^FO" + String.valueOf(posInicialXY.x) + "," + String.valueOf(posInicialXY.y) + "^GFA,61940,61940,76,,::::::::::::::gT018iW03,gT038iW07,:::::gT038iW07R03F,gT038iW07Q07FFC,gT038iW07P07IFE,gT038iW07O07JFE00FF8,gT038iW07N07IF0FF0IFC,gT038iW07M03IF003F7IFE,gT038iW07M0IFI01LF,gT038iW07L03FFK0LF8,gT038iW07L0FF8K0IF81F8,gT038iW07K03FCL0FFC00FC,gT038iW07K07FM07CI0FC,gT038iW07K0FCM078I07E,gT038iW07K0F8M07CI07E,gT038iW07J01FN07CI03E,gT038iW07J01EN07CI03F,gT038iW07J03CN07CI03F,gT038iW07J03CN03CI01F,:gT038iW07J038N03CI01F8,gT038iW07J078N03CI01F8P018,gT038iW07J078N03EJ0F8P07E,gT038iW07J078N03EJ0F8P0FF,gT038iW07J078N03EJ0F8O01FF8,gT038iW07J078N03EJ0FCO01FF8,gT038iW07J07O03EJ07CO01FF8,::gT038iW07J07O01EJ07CP0FF8,gT038iW07J07O01EJ07EM0180FF,gT038iW07J07O01EJ03EM0E003E,gT038iW07J07O01EJ03EL0F,gT038iW07J07O01EJ03EK0F8,gT038iW07J07O01EJ03EJ0FE,gT038iW07J07O01EJ03EI07F,gT038iW07J07O01EJ03F007F8,gT038iW07J07O01EJ03F07FE,gT038iW07J07O01EJ03F3FF,gT038iW07J07O01EJ03IF8,gT038iW07J07O01EJ01FFE,gT038iW07J07I03CJ01EJ01FF,gT038iW07J07I0FFJ01EJ01FC,gT038iW07J07001FF8I01EJ01F,:gT038iW07J07003FFCI01EJ01F8,:::gT038iW07J07801FF8I01EJ01F8,gT038iW07J07801FF8I03EJ01F8,gT038iW07J07800FFJ03EJ01F8,gT038iW07J078007EJ03EJ01F8,gT038iW07J038N03EJ01F8,gT038iW07J03CN03EK0F8,:gT038iW07J03EN03EK0FC,gT038iW07J01EN03CK0FC,gT038iW07J01FN03CK0FC,gT038iW07K0F8M03CK0FC,gT038iW07K07EM07CK0FC,gT038iW07K03F8L07CK0FC,gT038iW07K01FFL07CK0FC,gT038iW07L0IFK0FCK0FC,gT038iW07L03IFC001F8K0FC,gT038iW07M0NF8K0FC,gT038iW07M01MF8K0FC,gT038iW07O0LFL0FC,gT038iW07P03JFL0FC,gT038iW07T07L0FC,:::::::::::::gT038iW07R07FFL0FC,gT038iW07P0KFL0FC,gT038iW07N03LFL0FC,gT038iW07M03MF8K0FC,gT038iW07L01NF8K0FC,gT038iW07L07IFI01F8K0FC,gT038iW07L0FFEK0FCK0FC,gT038iW07K03FEL07CK0FC,gT038iW07K07FM07CK0FC,gT038iW07K0FCM07CK0FC,gT038iW07K0F8M03CK0FC,gT038iW07J01FN03CK0FC,gT038iW07J01EN03CK0FC,gT038iW07J03EN03EK0FC,gT038iW07J03CN03EK0F8,gT038iW07J03CN03EJ01F8,gT038iW07J078N03EJ01F8,gT038iW07J0780078J03EJ01F8,gT038iW07J078007CJ03EJ01F8,gT038iW07J078003EJ03EJ01F8,gT038iW07J078001EJ01EJ01F8,gT038iW07J07J0FJ01EJ01F8,::gT038iW07J07I01EJ01EJ01F8,gT038iW07J07I03EJ01EJ01F,gT038iW07J07I07CJ01EJ01F,gT038iW07J07I078J01EJ01F,gT038iW07J07I04K01EJ01F,gT038iW07J07O01EJ01FC,gT038iW07J07O01EJ03FE,gT038iW07J07O01EJ03FF,gT038iW07J07O01EJ03FF8,gT038iW07J07O01EJ03E7C,gT038iW07J07O01EJ03E1F,gT038iW07J07O01EJ03E0F8,gT038iW07J07O01EJ03E03C,gT038iW07J07O01EJ03E01E,gT038iW07J07O01EJ07E007,gT038iW07J07O01EJ07C0038,gT038iW07J07O01EJ07CI0E,gT038iW07J07O03EJ07CI07,gT038iW07J07O03EJ07CI018,gT038iW07J07O03EJ07CJ0C,gT038iW07J078N03EJ0FCJ06,gT038iW07J078N03EJ0F8J018,gT038iW07J078N03EJ0F8K0C,gT038iW07J078N03EJ0F8K02,gT038iW07J038N03CI01F8K01,gT038iW07J038N03CI01F8,gT038iW07J03CN03CI01FO0E,gT038iW07J03CN03CI03FN03F,gT038iW07J03CN07CI03FN07F8,gT038iW07J01EN07CI03EN0FFC,gT038iW07J01FN07CI03EN0FFC,gT038iW07K0F8M07CI07EN0FFC,gT038iW07K0FEM078I07EN0FFC,gT038iW07K03F8L0FEI0FCN0FFC,gT038iW07K01FEL0FFC00FCN07FC,gT038iW07L0FFCK0IFC1F8N07F8,gT038iW07L03FF8I01LF8N01F,gT038iW07M0IF8001LF,gT038iW07M01IF803F3IFE,gT038iW07N03IFDFF07FFC,gT038iW07O03JFE007F,gT038iW07P03IFC,gT038iW07Q03FF8,gT038iW07R01E,gT038iW07,:::::::::::gT038iW07J03TFC003C,gT038iW07J03TFC003FF,gT038iW07J03TFC003IF8,gT038iW07J03TFC003JFE,gT038iW07J03TFC003LF,gT038iW07J03TFC001MFC,gT038iW07J03TFCJ0MFE,gT038iW07J03TFCK07KFE,gT038iW07J03TFCL01JFE,gT038iW07J03TFCM07IFE,gT038iW07J03TFCL03JF,gT038iW07Q07FCQ01JF8,gT038iW07Q07FCQ0JF8,gT038iW07Q07FCP07IFC,gT038iW07Q07FCO07IFC,gT038iW07Q07FCN03IFE,gT038iW07Q07FCN03FFE,gT038iW07Q07FCN03IF8,gT038iW07Q07FCO0JF8,gT038iW07Q07FCO01JF8,gT038iW07Q07FCP03JF,gT038iW07Q07FCQ07JF,gT038iW07Q07FCR0JFE,gT038iW07Q07FCR01JFE,gT038iW07Q07FCS07IFE,gT038iW07Q07FCR0KFE,gT038iW07Q07FCP03LFE,gT038iW07Q07FCO0NF,gT038iW07Q07FCN03LFC,gT038iW07Q07FCN03KF,gT038iW07Q07FCN03IFE,gT038iW07Q07FCN03FF8,gT038iW07Q07FCN03F,gT038iW07Q07FC,gT038iW07Q07FE,gT038iW07J03TFCJ0F8,gT038iW07J03TFCI07FF,gT038iW07J03TFCI0IF8,gT038iW07J03TFC001IFC078,gT038iW07J03TFC001IFC0F8,gT038iW07J03TFC003IFE0F8,gT038iW07J03TFC003F07E0FC,gT038iW07J03TFC003E03F0FC,gT038iW07J03TFC003E01F07C,:gT038iW07gH03E01F07C,gT038iW07gH03E01F0FC,gT038iW07gH01F01F0FC,gT038iW07gH01F81F1F8,gT038iW07gI0FE1F7F8,gT038iW07gI0LF8,gT038iW07gH01LF,gT038iW07gH03KFE,gT038iW07gH03KFC,gT038iW07gH03KF,gT038iW07gH03F,gT038iW07M03QFC0018,gT038iW07L01RFC,gT038iW07L07RFC,gT038iW07L0SFC,gT038iW07K01SFC003OF,gT038iW07K03SFC003OF,gT038iW07K07SFC003OF,gT038iW07K0TFC003OF,gT038iW07K0TFC003OF8,gT038iW07J01TFCK0FF,gT038iW07J01JFV07F8,gT038iW07J03IFW03FC,gT038iW07J03FFCW03FE,gT038iW07J07FF8W0IF8,gT038iW07J07FFW03IFC,gT038iW07J07FFW07IFE,gT038iW07J07FEV01FFCFF,gT038iW07J07FEV07FF87F8,gT038iW07J07FCU01FFE03F8,gT038iW07J07FCU03FF800F8,gT038iW07J07FCU03FFI078,gT038iW07J07FCU03FCI038,gT038iW07J07FCU03FJ018,gT038iW07J07FCU03CK08,gT038iW07J07FCU038,gT038iW07J07FE,gT038iW07J07FEW03FF8,gT038iW07J07FEW0IFE,gT038iW07J07FFV03JF8,gT038iW07J07FFV07JFC,gT038iW07J03FF8U0KFE,gT038iW07J03FFCT01LF,gT038iW07J03FFET01FE3E7F8,gT038iW07J01IFCS03F83E1F8,gT038iW07J01TFC003F03E0F8,gT038iW07K0TFC003F03E0FC,gT038iW07K0TFC003E03E0FC,gT038iW07K07SFC003E03E07C,gT038iW07K03SFC003E03E07C,gT038iW07K01SFC003E03E0FC,gT038iW07L0SFC003E03E0FC,gT038iW07L07RFC003F03E1F8,gT038iW07L01RFC003F03E3F8,gT038iW07M07QFC001F83EFF,gT038iW07N07PFC001F83IF,gT038iW07gI0E03FFE,gT038iW07gK03FFC,gT038iW07gK03FF8,gT038iW07gK03FC,gT038iW07,::gT038iW07gH03LF8,::gT038iW07J03TFC003LF8,:gT038iW07J03TFC001LF8,gT038iW07J03TFCM07F,gT038iW07J03TFCM01F8,gT038iW07J03TFCN0F8,gT038iW07J03TFCN0FC,gT038iW07J03TFCN07C,:gT038iW07J03TFCN0FC,:gT038iW07J03FEJ01FEI07FCN0FC,gT038iW07J03FCJ01FEI07FCN018,gT038iW07J03FCJ01FEI07FC,::gT038iW07J03FCJ01FEI03FCN0301C,gT038iW07J03FCJ01FEI07FCN0F83F,gT038iW07J03FCJ01FEI07FCN07EFF,gT038iW07J03FEJ03FEI07FCN03IF,gT038iW07J03FEJ03FEI07FCN01IF,gT038iW07J03FEJ03FEI07FCO0IF,gT038iW07J03FEJ03FFI07FCO03FE,gT038iW07J03FEJ03FFI0FFCP0FC,gT038iW07J03FFJ07FF801FFCI08I0F8,gT038iW07J03FFJ07FFE03FFC001F003FE,gT038iW07J01FF8I0NF8001F807FF,gT038iW07J01FFCI0NF8003F00IF8,gT038iW07J01FFE003NFI03F01IF8,gT038iW07J01IFC0OFI03E01IFC,gT038iW07K0MFEKFEI03E03F8FC,gT038iW07K0MFE7JFEI03E03F07C,gT038iW07K07LFC3JFCI03E07E07C,gT038iW07K03LFC3JF8I03E0FE07C,gT038iW07K03LF81JFJ03F0FC07C,gT038iW07K01LF807FFCJ03IFC0FC,gT038iW07L0LF001FFK01IF80F8,gT038iW07L07JFCP01IF81F8,gT038iW07J0F03JF8Q0IF0078,gT038iW07I01080IFER07FE,gT038iW07I02FC01FFS01F8,gT038iW07I029C,gT038iW07I028C,gT038iW07I0108,gT038iW07I01F8,gT038iW07,::::::::::::::::::::::::gT038iW0703NFE0LFC007FE07NF8,gT038iW0703NFE0LFC007FE07NFC,gT038iW0703NFE0LFC007FE07NF8,:gT038iW0703NFE0LFE007FE07NF8,gT038iW0703FL07EM01JFE07EL0F8,gT038iW0703FL07EM01JFE07CL0F8,gT038iW0703FL07EM03JFE07CL0F8,::gT038iW0703FL07EL07JFBE07CL0F8,gT038iW0703F07IF07E0F8I07EI03E07C1IFE0F8,:::gT038iW0703F07IF07EL07CI03E07C1IFE0F8,gT038iW0703F07IF07EK0F800F83E07C1IFE0F8,::::gT038iW0703F07IF07E0FFE007FF003E07C1IFE0F8,::::gT038iW0703FL07E007E0F83FK07CL0F8,gT038iW0703FL07E007E0F81FK07CL0F8,:::gT038iW0703NFE07C1FJ0FJ07NF8,gT038iW0703NFE0F81F07C0F83E07NF8,::gT038iW0703NFE0F81F07C0F83E07NFC,gT038iW0701NFC0481F07C0F83E07NF8,gT038iW07V0FFC007FE,::::gT038iW0703LF03FF001IFC0IFE07FE07C1F,gT038iW0703LF07FF001IFC0IFE07FE07C1F,:gT038iW0703LF03FF001IFC0IFE07FE07C1F,gT038iW0703LF07FF001IFC0IFE07FE07C1F,gT038iW0703NFE0F801MFEK07JF8,gT038iW0703E07C1IFE0F800MFEK07JF8,:::gT038iW0701FFN07C07MFE0200107F7F8,gT038iW07001F8N07IF83F003E07IF03E,:::gT038iW07I0FO07IF83F001E07IF07F,gT038iW07L01IFEL07IF8M07IF,::::gT038iW0703FF03E003E0FFC0F800F81IFC1F801F,gT038iW0703FF83E003E0FFE0F800F83IFC1F801F,:gT038iW0703FF83E003E0FFC0F800F83IFC1F801F,gT038iW0703FF83E003E0FFE0F800F83IFC1F801F,gT038iW07011IFEK047IF8J011F83FF8I0F8,gT038iW07001IFEL07IF8L0F83FFJ0F8,:::gT038iW07I0IFEM03FF8N03F1,gT038iW0703E0FFE0FC00F81FF83F003E07FF,:::gT038iW0703E0IF0FC00F81FF83F003F07FF,gT038iW07001LFC1F001F07IF83FF83F07C1F,:::gT038iW07001LFC1F001F07IF83FF83F07C1F8,gT038iW07001F87NFE0JF07C0KF801FF8,gT038iW07001F83NFE0JF07C0KF801FF8,gT038iW07001F87NFE0JF07C0KF801FF8,gT038iW07001F83NFE0JF07C0KF801FF8,gT038iW07001F87NFE0JF07C0KF801FF8,gT038iW0701DPFCI07FF07FE,gT038iW0703LFJ0FCI07FF07FE,:::gT038iW0703LFJ0FCI07EE07FE,gT038iW0703FF83FF03E0FFE007E0F8I07NF8,::::gT038iW07001FFC1FJ0LFE007FE07CL0F8,:::gT038iW07001FFC1F8I0LFE007FE07CL0F8,gT038iW0703FF83MFCI07E0F8I07C0IFE0F8,gT038iW0703FF03MFCI07E0F8I07C1IFE0F8,::gT038iW0703FF83MFCI07E0F8I07C1IFE0F8,gT038iW0703F003MFCI07FFK07C1IFE0F8,gT038iW0703E003FF8I0FC1F07FF003E07C1IFE0F8,gT038iW0703F003FF8I0FC1F07FF003E07C1IFE0F8,::gT038iW0703F003FF8I0FC1KFE01207C1IFE0F8,gT038iW0703FI01F801FFC1IFE0F8I07C1IFE0F8,:::gT038iW0703FI01F803FFC3IFE1F8I07C0IFE0F8,gT038iW0703F003E003SFE07CL0F8,::::gT038iW0703LF03F0FC3F07E1F8I07NF8,gT038iW0703LF03E0FC1F07E0F8I07NF8,:::gT038iW07,:::::::::::::::::::::::gT038iW07L07,gT038iW07K03FU0EP07,gT038iW07J03FCT07EP0F,gT038iW07I01FEM01CK03FCP0F,gT038iW07I0FEN01C4I01FCQ0F,gT038iW07001F8K01IFCEI0FER0F,gT038iW07I07EK01IFCEI07CR0F,gT038iW07J0FCO04I01FR0F,gT038iW07J01F8S07EQ0F,gT038iW07K03FS01F8P0F,gT038iW07K0FET07EK0LF,gT038iW07J07FJ01IF8L0F8K0LF,gT038iW07I01F8J01IFCK07EL0LF,gT038iW07I0FCK01IFK01FM0LF,gT038iW07001F8N03K07CM0LF,gT038iW07I07F8M018J0FER0F,gT038iW07J0FFM018J01FCQ0F,gT038iW07K0FFL01CK03F8P0F,gT038iW07K01FL01CL0FEP0F,gT038iW07L03L038M0EP0F,gT038iW07P01IF8X0F,gT038iW07P01IFY0F,gT038iW07003JF8001FFEM01EP0F,gT038iW07003JF8S0FEP0F,gT038iW07K04T03F8P07,gT038iW07K02S01FC,gT038iW07K02M01CJ0FE,gT038iW07K03M01CJ07CM0LF,gT038iW07K07J01JF8I01F8L0LF,gT038iW0700101EJ01JFCJ03EL0LF,gT038iW07003FFCM01CEK0FCK0LF,gT038iW07001FFN01C7K07EK0LF,gT038iW07S01C7J01F8,gT038iW07U07J07C,gT038iW07I06Q02I01F,gT038iW07I0F84S07C,gT038iW07001FC6K03FCK07F,gT038iW070030C2K07FEK01FEL0LF,gT038iW07003063K0F8FL03F8K0LF,gT038iW07003063J01C038L07EK0LF,gT038iW07001063J01C018M0EK0LF,gT038iW07001866J01801CS0LF,gT038iW07I0FFEJ01801CM02K0F01E0F,gT038iW07001FFCJ01801CL01EK0F01E0F,gT038iW07003M01C018L0FEK0F01E0F,gT038iW07Q0E078K07F8K0F01E0F,gT038iW07Q07FFK03FCL0F01E0F,gT038iW07K02K03FEK0FCM0F01E0F,gT038iW07K03L07L07CM0F01E0F,gT038iW07I0IFER01F8L0F01E0F,gT038iW07001IFES03EL0F01E0F,gT038iW07001C03K01FEM0FCK0FJ0F,gT038iW07003003K07FF8L07EK0FJ0F,gT038iW07003003J01E01CK01F8K0FJ0F,gT038iW07003003J018006K07CL07J07,gT038iW07001M03I03J01F,gT038iW07P060E018I0FC,gT038iW07K08J061F118I07F,gT038iW0700183EJ0433188J0FE,gT038iW0700187EJ0431988J01FCK0LF,gT038iW07003063J0431988K03EK0LF,gT038iW070030C3J0411B08L0EK0LF,gT038iW070011C3J041FF08R0KFE,gT038iW07001F86J0638018U01FC,gT038iW07001F86J0630018U03F8,gT038iW07I06L033003J07Q07E,gT038iW07P02300EJ0FQ0FC,gT038iW07003N0183CJ0FP01F8,gT038iW07003EN0FF8J06P03F,gT038iW07001F8M03CV07E,gT038iW07I03FgK0FC,gT038iW07I03FCgI01F8,gT038iW07I039F8I01IF8T07F,gT038iW07I0381FI01IFCT0FE,gT038iW07I0381FI01IFK0IFEK01KF,gT038iW07I038F8L03K0IFEK03KF,gT038iW07I03FEM018L038K07KF,gT038iW07I03FN018M0CK0LF,gT038iW07001FCN01CM0CK0LF,gT038iW07003EO01CM0E,gT038iW07003P038M0E,gT038iW07P01IF8M0E,gT038iW07P01IFK0IFC,gT038iW0707JFM03K0IFC,gT038iW0707JFM018J0IF8K07KF,gT038iW07001806M018L01CK0LF,gT038iW07001002M01CM0CK0LF,gT038iW07003003M01CM0EK0LF,gT038iW07003003M038M0EK0LF,gT038iW07001003J01IF8M0EK0FJ0F,gT038iW07001806J01IFM01CK0FJ0F,gT038iW07001E0EJ01FFEK0IFCK0FJ0F,gT038iW07I0FFCS0IF8K0FJ0F,gT038iW07I07F8gH07J0F,gT038iW07gN078I0F,gT038iW07Q07CU078I0F,gT038iW07Q0FE38J01CM078I0F,gT038iW0707JFJ01CE38J07E08K07C001F,gT038iW0707JFJ018718J07F1CK03E003E,gT038iW07001806J01831CJ0E38CK03F80FE,gT038iW07001002J01831CJ0C38EK01JFC,gT038iW07003003J01C31CJ0C18EL0JF8,gT038iW07003003K0C318J0C18EL07IF,gT038iW07001003K07FF8J0618EL03FFE,gT038iW07001806K0IFK0319CM0FF8,gT038iW07001E0EJ01FFEK03FFC,gT038iW07I0FFCJ018M07FF8K08,gT038iW07I03F8S0FFCL0F,gT038iW07Y0CN0FC,gT038iW07gN0FF,gT038iW07P01KFR0FFC,gT038iW07P01KFR07FF,gT038iW07001C0EJ01KFI0KF8I01FFE,gT038iW07003C0FL07L0KF8J07FF8,gT038iW07001C0EL038L078M07FFE,gT038iW07R07CL03CM079FF8,gT038iW07R0FFL01EM0787FE,gT038iW07Q03C78K03FM0780FF8,gT038iW07Q0783CK0F38L07807F8,gT038iW07P01E00CJ01E1CL0781FF8,gT038iW07P01CM0780EL078FFE,gT038iW07P01N0F006L07BFF,gT038iW07Y0CO07FFC,gT038iW07R0F8U0IF,gT038iW07Q03FET03FFC,gT038iW07Q07FFL0FEL0IF,gT038iW07Q0E278J03FFL0FF8,gT038iW07I03FFJ01C238J079B8K0FE,gT038iW07I0IFCI018218J0719CK0F8,gT038iW07001F03EI01821CJ0E18CK0E,gT038iW07001C007I01821CJ0C18E,gT038iW070038003I01821CJ0C18E,gT038iW070038003I01C218J0C18E,gT038iW070038003J0C238J0E18E,gT038iW070018007J0C3FK0619C,gT038iW07001E00FK03EK071BC,gT038iW07I0IFEK038K041F8,gT038iW07I03FF8S01E,gT038iW07,:gT038iW07K0F8I01IFC,gT038iW07J01FEI01IFCJ0IFE,gT038iW07J03DEL07K0IFE,gT038iW070010307L038J0IFEM07F,gT038iW070018703L018L018L03FFE,gT038iW07001C703L01CM0CL07IF,gT038iW07I0E303L01CM0EK01JFC,gT038iW07I07B07L01CM0EK03JFE,gT038iW07I03FCEU0EK03FC0FE,gT038iW07J0FFEL04N06K07E003F,gT038iW07J03F8J0C1FT07C001F,gT038iW07P01C1F8J06078K078I0F8,gT038iW07P018398J060FCK078I078,gT038iW07J0EK01831CJ0E0FCK0FJ078,gT038iW07I07FCJ01861CJ0C18EK0FJ078,gT038iW07I0IFJ018618J0C18EK0FJ078,gT038iW07001C3F8I01FE18J0C38EK0FJ078,gT038iW0700181BCJ0FC18J0E70EK078I078,gT038iW07003818EJ078L07F0CK078I078,gT038iW070038187R07E0CK078I0F8,gT038iW070018183R018M07CI0F,gT038iW07001C38gH03F003F,gT038iW07I0FFK01KFR03FE1FE,gT038iW07I07EK01KFR01JFE,gT038iW07P01JFEI0KF8J0JFC,gT038iW07S038J0KF8J07IF8,gT038iW07S018L018L01FFE,gT038iW07J06N01CM0CM03F,gT038iW07J06N01CM0C,gT038iW07J06N01CM0E,gT038iW07J06N038M0E,gT038iW07J06K01IF8M0EK0LF,gT038iW07J06K01IFM03CK0LF,gT038iW07P01FF8K0IFCK0LF,gT038iW07Y0IFL0KFE,gT038iW07gQ01FC,gT038iW07I07FF8gJ03F8,gT038iW07I0IFCJ03FF8V07E,gT038iW07001E00EJ0IFCV0FC,gT038iW070018007J0IF8J03FFEM01F8,gT038iW070038003I01CM07FFEM03F,gT038iW070038003I018M07P07E,gT038iW070018003I018M0EP0FC,gT038iW07001C007I018M0CO01F8,gT038iW07I0F01EI01CM0CO07F,gT038iW07I07FFCJ0CM0CO0FE,gT038iW07I01FFK0EM06N01KF,gT038iW07P01IFCJ07N03KF,gT038iW07I018K01IFCJ0IFEK07KF,gT038iW07I01CT0IFEK0LF,gT038iW07I01ET0IFEK0LF,gT038iW07I01F8,gT038iW07I019C,gT038iW07I018EJ01KF,gT038iW07I0183K0KFI0KF8,gT038iW07I01818J0C038J0KF8,gT038iW07001IFEI01C018J07JF8I0LF,gT038iW07003JFI018018J0600CK0LF,gT038iW07001JFI01801CJ0C00CK0LF,gT038iW07I018K01801CJ0C00EK0LF,gT038iW07P01C018J0C00EK0LF,gT038iW07I01FEK0C038J0E00EK0F,gT038iW07I0IFCJ0F0FK0E00CK0F,gT038iW07I0F83EJ07FFK0703CK0F,gT038iW07001C007J03FCK03FF8K0F,gT038iW070018003R01FFL0F,gT038iW070038003S0FCL0F,gT038iW070038003gG0F,gT038iW070018007gG0F,gT038iW07001C00FJ0CV0F,gT038iW07I0IFEI01EV0F,gT038iW07I03FFCI01EM07N0F,gT038iW07J07CJ01CM0FN0F,gT038iW07Y0FN0F,gT038iW07Y06,gT038iW07J06,:gT038iW07J06O08S0LF,gT038iW07J06N01CS0LF,gT038iW07J06L07IF8L06K0LF,gT038iW07Q0JF8L0EK0LF,gT038iW07P01JF8I03IFCJ0LF,gT038iW07P01C01CJ07IFC,gT038iW07J03CJ01801CJ0F00E,gT038iW07I07FF8I01801CJ0E00E,gT038iW07I0IFCI018018J0C00E,gT038iW07001E00EJ08M0C00E,gT038iW070018007R0E,gT038iW070038003K0FU0LF,gT038iW070038003J03FEL0FCL0LF,gT038iW070018003J07FFK01FFL0LF,gT038iW07001C007J0E27K03FF8K0KFE,gT038iW07I0F03EI01C238J0719CK07JFC,gT038iW07I07FFCI01C218J0618CN03F8,gT038iW07I01FFJ01821CJ0E18EN07F,gT038iW07P01821CJ0C18EN0FE,gT038iW07P01821CJ0C18EM01FC,gT038iW07I08L01C218J0C18EM03F,gT038iW070018006J0C238J0E18CM07E,gT038iW070018003J0C3FK0619CM0FC,gT038iW070038003K03EK061F8L01F8,gT038iW070038183K038L01FM03F,gT038iW070038183gH07E,gT038iW0700183C7gG01FEIF,gT038iW07001C7FEJ03FCL038L03KF,gT038iW07I0FE7EJ07FEK01FFL07KF,gT038iW07I07C18J0F0FK03FF8K0LF,gT038iW07Q0E038J0783CK0LF,gT038iW07P01C018J0701C,gT038iW07P018018J0E00C,gT038iW07003I06I01801CJ0C00E,gT038iW070038006I01801CJ0C00E,gT038iW07003E003I018018J0C00E,gT038iW07003F003I01C038J0E00EK07KF,gT038iW07003BC03J0C038J0601CK0LF,gT038iW070038E03R0700CK0LF,gT038iW070038787gG0LF,gT038iW0700381FEgG0LF,gT038iW0700380FEgG0F01E0F,gT038iW070038018I01KFI0KF8I0F01E0F,gT038iW070018L01KFI0KF8I0F01E0F,gT038iW07S03K0KF8I0F01E0F,gT038iW07S018L01CK0F01E0F,gT038iW07003I06L018M0CK0F01E0F,gT038iW070038006L01CM0EK0F01E0F,gT038iW07003E007L01CM0EK0F01E0F,gT038iW07003F003L018M0EK0F01E0F,gT038iW07003BC03L078M0EK0FJ0F,gT038iW070039E03I01IFK0IFCK0FJ0F,gT038iW070038787I01FFEK0IF8K0FJ0F,gT038iW0700383FER0IFL0FJ07,gT038iW0700380FE,gT038iW07003803C,gT038iW070018,gT038iW07,:::::,:::::::::::::::^FS\n"
                + "\n";

        // Logo de FRAGIL.
        Point lF_posXY = new Point(155 + posInicialXY.x, 575 + posInicialXY.y);
        if (ckbLogoEnvioFragil.isSelected()) {
            plantilla += "^FX Logo FRAGIL.\n"
                    + "^FO" + String.valueOf(lF_posXY.x) + "," + String.valueOf(lF_posXY.y) + "^GFA,7992,7992,36,,:::::W0gKF801gJFE,01PF8J0gKF801gJFE,:01PF8J0F8gH07801EgH01E,01PF8J0FgI07801CgI0E,::::L03F803F8J0FgI07801CgI0E,:::::::::L03F803F8J0FgI07801CM01MFCM0E,L03F803F8J0FgI07801CM03MFEM0E,L03F803F8J0FW0F8J07801CM0NFEM0E,L03F803F8J0FU01FFCJ07801CL01NFEM0E,L03F803F8J0FU0IFCJ07801CL03NFCM0E,L03F803F8J0FT03IFCJ07801CL0KFDQ0E,P03F8J0FT03IFCJ07801CK01JFER0E,P03F8J0FT01IFCJ07801CK07JF8R0E,P03F8J0FS0607DFCJ07801CK0KFS0E,P03F8J0FS0F8387CJ07801CJ03JFCS0E,P03F8J0FR01FC083CJ07801CI0LF838Q0E,P01F8J0FR03FFI0CJ07801CI0LF0FCQ0E,W0FR07FF8M07801CI0KFC1FEQ0E,W0FR0IFE18K07801CI0KF87FEQ0E,W0FQ01JF1EK07801CI0KF0FFEQ0E,W0FJ0F8K03LF8J07801CI0KFBFFCQ0E,W0FJ0F8K03LFCJ07801CI0NF8Q0E,W0FJ0F8K07LFCJ07801CI0NFR0E,W0FJ0F8K07LFCJ07801CI0MFE00IFM0E,W0FJ0F8K0MFCJ07801CI0MF801IF0CK0E,01PF8J0FJ0F8K0MFCJ07801CI0MF001FFE1CK0E,01PF8J0FJ0F8J01MFCJ07801CI0LFE003FFE1EK0E,01PF8J0FJ0F8J01MFCJ07801CI0LFC007FFC3FK0E,01PF8J0FJ0F8J01MFCJ07801CI0LFI0IF87F8J0E,01PF8J0FJ0F8J03MFCJ07801CI0KFEI0IF0FFCJ0E,01PF8J0FJ0F8J03MFCJ07801CI0KF8001FFE0FFCJ0E,01PF8J0FJ0F8J03MFCJ07801CI0JFEI03FFE1FFEJ0E,01PF8J0FJ0TFCJ07801CI07FF8J07FFC3IFJ0E,L0FE003F8J0FJ0TFCJ07801CQ07FF87IF8I0E,L0FE003F8J0FJ0TFCJ07801CU0JF8I0E,L0FE003F8J0FJ0TFCJ07801CU0JFCI0E,:L0FE003F8J0FJ0TFCJ07801CU07IF8I0E,L0FE003F8J0FJ0TFCJ07801CQ07FF87IFJ0E,K01FE003F8J0FJ0F8J03MFCJ07801CI0JFEI03FFC3IFJ0E,K07FE003F8J0FJ0F8J03MFCJ07801CI0KF8001FFE1FFEJ0E,K0FFE003F8J0FJ0F8J03MFCJ07801CI0KFC001FFE0FFCJ0E,J03IF003F8J0FJ0F8J01MFCJ07801CI0LFI0IF0FF8J0E,J07IF003F8J0FJ0F8J01MFCJ07801CI0LF8007FF87F8J0E,I01JF007F8J0FJ0F8J01MFCJ07801CI0LFC007FFC3FK0E,I03JF80FF8J0FJ0F8K0MFCJ07801CI0MF003FFE1EK0E,I07NFK0FJ0F8K0MFCJ07801CI0MF801FFE1CK0E,001IF3KFK0FJ0F8K0MFCJ07801CI0MFC00IF0CK0E,003FFE3JFEK0FJ0F8K07LFCJ07801CI0MFER0E,00IF81JFEK0FJ0F8K03LFCJ07801CI0NF8Q0E,01IF00JFCK0FJ0F8K03LFCJ07801CI0NFCQ0E,01FFC007IF8K0FQ01LFCJ07801CI0KF1FFCQ0E,01FF8003IFL0FR0LFCJ07801CI0KF87FEQ0E,01FFJ0FFEL0FR07KFCJ07801CI0KFC3FEQ0E,01FCJ01EM0FR03KFCJ07801CI0KFE0FEQ0E,01F8S0FR01KFCJ07801CI0LF07CQ0E,01ET0FS0KFCJ07801CI07KFCS0E,01CT0FS07JFCJ07801CJ01JFES0E,018T0FS03JFCJ07801CK07JFS0E,01U0FT0JFCJ07801CK03JFCR0E,01U0FT03IFCJ07801CK01KFR0E,01CT0FU0IFCJ07801CL07NFCM0E,01F8S0FU01FFCJ07801CL03NFEM0E,01FES0FV01FCJ07801CM0NFEM0E,01FFCR0FgI07801CM07MFEM0E,01IFR0FgI07801CM01MFCM0E,01IFEQ0FgI07801CN0MF8M0E,01JF8P0FgI07801CgI0E,01JFEP0FgI07801CgI0E,007JFCO0FgI07801CgI0E,001KFO0FgI07801CgI0E,I03JFEN0FgI07801CgI0E,I01KF8M0FgI07801CgI0E,I01KFEM0FgI07801CgI0E,I01FBJFCL0FgI07801CgI0E,I01F8KFL0FgI07801CgI0E,I01F80JFEK0FgI07801CgI0E,I01F801JF84I0FgI07801CgI0E,I01F8003IFC7I0FgI07801CgI0E,I01F8I07FFC7800FgI07801CgI0E,I01F8I0IFC7E00FgI07801CgI0E,I01F8007IFC7F80F8gH07801EgH01E,I01F803JF07FC0gKF801gJFE,I01F83JF803FC0gKF801gJFE,I01F9JFE001FC0gKF801gJFE,I01LF8I07C05BgHFB8015gHFE6,I01KFCJ03C,I01KFK01C,I07JFCL0C,001JFE,00KF8,01JFE,01JF,01IFC,01IF,01FF8,01FES0gKF801gJFE,01FT0gKF801gJFE,01CT0gKF801gJFE,01U0gKF801gJFE,W0FgI07801EgI0E,W0FgI07801CgI0E,::K01FFCN0FgI07801CgI0E,J01JF8M0FgI07801CgI0E,J07JFEM0FgI07801CgI0E,I01LF8L0FgI07801CgI0E,I07LFCL0FgI07801CgI0E,I0MFEL0FgI07801CgI0E,001NFL0FgI07801CgI0E,003NF8K0FgI07801CgI0E,003IF01IFCK0FgI07801CgI0E,007FF8001FFEK0FgI07801CgI0E,007FEJ07FEK0FQ07CP07801CgI0E,00FFCJ03FFK0FQ03FCO07801CI0F8X0E,00FF8J01FFK0FQ03FF8N07801C001F8X0E,01FFL0FF8J0FQ01FFEN07801C001F8X0E,01FEL07F8J0FQ01IF8M07801C001F8X0E,01FEL03F8J0FR0IFEM07801C001F8X0E,01FCL03F8J0FR0JFM07801C001F8X0E,03FCL03FCJ0FR0JF8L07801C001F8X0E,03FCL01FCJ0FR0JFCL07801C001F8P03M0E,03F8L01FCJ0FR0JFEL07801C001F8P03CL0E,03F8L01FCJ0FQ01KFL07801C001F8P03EL0E,03F8L01FCJ0FQ01KF8K07801C001F8P03F8K0E,03F8L01FCJ0FQ03KFCK07801C001F87QFEK0E,03F800FE001FCJ0FQ07KFEK07801C001F87RF8J0E,03F800FE001FCJ0FQ07KFEK07801C001F87RFCJ0E,03F800FE001FCJ0FQ07LFK07801C001F87SFJ0E,01FC00FE001FCJ0FQ03LFK07801C001F87SF8I0E,01FC00FE003FCJ0FQ01LF8J07801C001F87SFJ0E,01FE00FE003F8J0FQ01LF8J07801C001F87RFEJ0E,01KFE003F8J0FJ0F8L0LFCJ07801C001F87RF8J0E,00KFE007F8J0FI01FCL0LFCJ07801C001F87QFEK0E,00KFE007F8J0FI03FCL0LFCJ07801C001F87OF7FCK0E,00KFE007FK0FI03F8L0LFEJ07801C001F8P03FL0E,007JFE001FK0FI07FM0LFEJ07801C001F8P03CL0E,007JFEI0EK0FI07EM0LFEJ07801C001F8P038L0E,003JFEO0FI07EL01LFEJ07801C001F8P02M0E,003JFEO0FI07EL01MFJ07801C001F8X0E,001JFCO0FI07EL03MFJ07801C001F8X0E,W0FI07FL07MFJ07801C001F8X0E,W0FI07UFJ07801C001F8X0E,W0FI03UFJ07801C001F8X0E,W0FI03UFEI07801C001F8X0E,W0FI01VF8007801C001F8X0E,W0FJ0VFI07801C001F8X0E,W0FJ07TFCI07801C001F8X0E,W0FJ03TF8I07801C001F8X0E,01PF8J0FQ0NFJ07801C001F8X0E,01PF8J0FQ07MFJ07801C001F8X0E,01PF8J0FQ03MFJ07801C001F8X0E,01PF8J0FQ01MFJ07801C001F8P02M0E,01PF8J0FQ01MFJ07801C001F8P038L0E,01PF8J0FR0MFJ07801C001F8P03EL0E,01PF8J0FR0MFJ07801C001F8P03FL0E,01PF8J0FR0LFEJ07801C001F87QFCK0E,W0FR0LFEJ07801C001F87RFK0E,W0FR0LFEJ07801C001F87RF8J0E,W0FQ01LFCJ07801C001F87RFEJ0E,W0FQ01LFCJ07801C001F87SF8I0E,W0FQ03LFCJ07801C001F87SF8I0E,W0FQ03LF8J07801C001F87SFJ0E,W0FQ07LF8J07801C001F87RFCJ0E,W0FQ0MFK07801C001F87RFK0E,W0FQ07LFK07801C001F87QFEK0E,W0FQ03KFEK07801C001F8P03F8K0E,01PF8J0FQ01KFCK07801C001F8P03EL0E,01PF8J0FQ01KFCK07801C001F8P03CL0E,01PF8J0FR0KF8K07801C001F8P03M0E,01PF8J0FR0KFL07801C001F8X0E,01PF8J0FR0JFEL07801C001F8X0E,01PF8J0FR0JFCL07801C001F8X0E,01PF8J0FR0JFM07801C001F8X0E,01PF8J0FR0IFEM07801C001F8X0E,01FCS0FQ01IF8M07801C001F8X0E,01FCS0FQ01FFEN07801C001F8X0E,01FCS0FQ03FF8N07801CgI0E,01FCS0FQ07FCO07801CgI0E,01FCS0FQ07CP07801CgI0E,01FCS0FgI07801CgI0E,:::::::::01FCS0FgI07801EgI0E,01FCS0gKF801gJFE,:::,:::::^FS\n"
                    + "\n";
        }

        // Informacion de envio.
        int iE_alturaFuente = 33;
        int iE_interlineado = 33;
        Point iE_posXY = new Point(380 + posInicialXY.x, 20 + posInicialXY.y);
        String informacionEnvio = getInformacionEnvio(iE_alturaFuente, iE_interlineado, iE_posXY);
        // Verifico que no se sobreescriba informacion en la etiqueta.
        if (numLineasInfoEnvio > 8) {
            String opciones[] = {"Continuar", "Cancelar"};
            int ventana = JOptionPane.showOptionDialog(this,
                    "Es posible que el texto de información de envío sobrescriba parcialmente la etiqueta, Se imprimirá "
                    + String.valueOf(numLineasInfoEnvio) + " líneas de información de envío, mientras que lo recomendado "
                    + "es 8. ¿Desea continuar con la impresión o cancelar?",
                    "Impresión de etiqueta",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null, opciones, opciones[1]);
            if (ventana == 1) {
                return;
            }
        }
        plantilla += "^FX Informacion de envio.\n"
                + "^CI28\n"
                + "^CF0," + String.valueOf(iE_alturaFuente - 3) + "\n"
                + "^AOR^FO" + String.valueOf(iE_posXY.x + 40) + "," + String.valueOf(iE_posXY.y) + "^FH^FD" + Utils.converTextToHex("Información de envío:") + "^FS\n"
                + "^CF0," + String.valueOf(iE_alturaFuente) + "\n"
                + informacionEnvio + "\n";

        // Informacion de contenido.
        int iC_alturaFuente = 30;
        int iC_interlineado = 28;
        Point iC_posXY = new Point(102 + posInicialXY.x, 20 + posInicialXY.y);
        String informacionContenido = getInformacionContenido(iC_alturaFuente, iC_interlineado, iC_posXY);
        // Verifico que no se sobreescriba informacion en la etiqueta.
        if (numLineasInfoCont > 3 && (this.ckbFechaEnvio.isSelected() || this.ckbCodigoBarras.isSelected())) {
            String opciones[] = {"Continuar", "Cancelar"};
            int ventana = JOptionPane.showOptionDialog(this,
                    "Es posible que el texto de información de contenido sobrescriba parcialmente la etiqueta, Se imprimirá "
                    + String.valueOf(numLineasInfoCont) + " líneas de información de contenido, mientras que lo recomendado "
                    + "es 3. ¿Desea continuar con la impresión o cancelar?",
                    "Impresión de etiqueta",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null, opciones, opciones[1]);
            if (ventana == 1) {
                return;
            }
        } else if (numLineasInfoCont > 4 && (!this.ckbFechaEnvio.isSelected() && !this.ckbCodigoBarras.isSelected())) {
            String opciones[] = {"Continuar", "Cancelar"};
            int ventana = JOptionPane.showOptionDialog(this,
                    "Es posible que el texto de información de contenido sobrescriba parcialmente la etiqueta, Se imprimirá "
                    + String.valueOf(numLineasInfoCont) + " líneas de información de contenido, mientras que lo recomendado "
                    + "es 4. ¿Desea continuar con la impresión o cancelar?",
                    "Impresión de etiqueta",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.WARNING_MESSAGE,
                    null, opciones, opciones[1]);
            if (ventana == 1) {
                return;
            }
        }
        plantilla += "^FX Informacion de contenido.\n"
                + "^CF0," + String.valueOf(iC_alturaFuente) + "\n"
                + informacionContenido + "\n";

        // Fecha de envio.
        int fE_alturaFuente = 28;
        Point fE_posXY = new Point(5 + posInicialXY.x, 20 + posInicialXY.y);
        if (ckbFechaEnvio.isSelected()) {
            plantilla += "^FX Fecha de envio.\n"
                    + "^CF0," + String.valueOf(fE_alturaFuente) + "\n"
                    + "^AOR^FO" + String.valueOf(fE_posXY.x) + "," + String.valueOf(fE_posXY.y) + "^FDFecha: " + getFecha() + "^FS\n";
        }

        // Numero de orden.
        int nO_alturaFuente = 28;
        Point nO_posXY = new Point(5 + posInicialXY.x, 385 + posInicialXY.y);
        // Codigo de barra.
        long cB_codigo = 0L;
        int cB_altura = 90;
        Point cB_posXY = new Point(37 + posInicialXY.x, 505 + posInicialXY.y);
        try {
            cB_codigo = Long.parseLong(txtCodigoBarras.getText());
        } catch (NumberFormatException ex) {
        }
        if (ckbCodigoBarras.isSelected()) {
            plantilla += "^FX Numero de orden.\n"
                    + "^CF0," + String.valueOf(nO_alturaFuente) + "\n"
                    + "^AOR^FH^FO" + String.valueOf(nO_posXY.x) + "," + String.valueOf(nO_posXY.y) + "^FD" + Utils.converTextToHex("Ord.N°:") +"^FS\n"
                    + "\n"
                    + "^FX Codigo de barras (Numero de orden).\n"
                    + "^FO" + String.valueOf(cB_posXY.x) + "," + String.valueOf(cB_posXY.y) + "^BY3\n"
                    + "^BER," + String.valueOf(cB_altura) + ",Y,N\n"
                    + "^FD" + String.valueOf(cB_codigo) + "^FS";
        }

        plantilla += "^XZ";

        // Conexion con la impresora y se manda a imprimir.
        try {
            DocFlavor flavor = DocFlavor.BYTE_ARRAY.AUTOSENSE;
            Doc doc = new SimpleDoc(plantilla.getBytes(), flavor, null);
            DocPrintJob docPrintJob = printService.createPrintJob();
            docPrintJob.print(doc, null);
        } catch (PrintException | NullPointerException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error con la impresora seleccionada, verifique si a seleccionado la "
                    + "impresora correcta o instale el driver correspondiente.",
                    "Impresión de etiqueta",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_JBtImprimirActionPerformed

    private void cmbDriverImpresoraItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDriverImpresoraItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            APP.configInit.nombreImpresora = evt.getItem();
            APP.guardarConfiguracionInicio();
        }
    }//GEN-LAST:event_cmbDriverImpresoraItemStateChanged

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        // TODO add your handling code here:
        txtNombre.setText("");
        txtDireccion.setText("");
        txtEmail.setText("");
        txtTelefono.setText("");
        txtCiudad.setText("");
        txtProvincia.setText("");
        txtMasInformacion.setText("");
        txtInfoCont.setText("");
        txtCodigoBarras.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        // TODO add your handling code here:
        formWindowClosing(null);
        System.exit(0);
    }//GEN-LAST:event_btnCerrarActionPerformed

    private void txtCodigoBarrasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCodigoBarrasKeyTyped
        // TODO add your handling code here:
        ckbCodigoBarras.setSelected(true);
    }//GEN-LAST:event_txtCodigoBarrasKeyTyped

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        APP.configInit.informacionContenido = this.txtInfoCont.getText();
        APP.guardarConfiguracionInicio();
    }//GEN-LAST:event_formWindowClosing

    private void txtInfoContKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtInfoContKeyTyped
        // TODO add your handling code here:
        SwingUtilities.invokeLater(() -> {
            if (!txtInfoCont.getText().isBlank()) {
                for (String str : APP.configInit.histInfoCont) {
                    if (str.contains(txtInfoCont.getText())) {
                        txtCoincidenciaHist.setText(str);
                    }
                }
            }
        });
    }//GEN-LAST:event_txtInfoContKeyTyped

    private void txtCoincidenciaHistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtCoincidenciaHistMouseClicked
        // TODO add your handling code here:
        txtInfoCont.setText(txtCoincidenciaHist.getText());
    }//GEN-LAST:event_txtCoincidenciaHistMouseClicked

    private PrintService findPrintService(String printerName) {
        PrintService[] printServices = PrintServiceLookup.lookupPrintServices(null, null);
        for (PrintService printService : printServices) {
            if (printService.getName().trim().equals(printerName)) {
                return printService;
            }
        }
        return null;
    }

    private String getInformacionEnvio(int iE_alturaFuente, int iE_interlineado, Point iE_posXY) {
        // Si no se imprime el logo de contenido FRAGIL entonces se puede 
        // aprovechar todo el ancho de la etiqueta para imprimir la informacion 
        // del destinatario.
        int anchoEnPixeles = this.ckbLogoEnvioFragil.isSelected() ? 550 : 780;
        String informacionEnvio = "";
        numLineasInfoEnvio = 0;

        if (!txtNombre.getText().isEmpty()) {
            for (String txt : justificarTexto(txtNombre.getText(), iE_alturaFuente, anchoEnPixeles)) {
                txt = Utils.converTextToHex(txt);
                informacionEnvio = informacionEnvio + "^AOR^FO" + String.valueOf(iE_posXY.x - iE_interlineado * numLineasInfoEnvio) + "," + String.valueOf(iE_posXY.y) + "^FH^FD" + txt + "^FS\n";
                numLineasInfoEnvio++;
            }
        }
        if (!txtTelefono.getText().isEmpty()) {
            for (String txt : justificarTexto("Telf: " + txtTelefono.getText(), iE_alturaFuente, anchoEnPixeles)) {
                txt = Utils.converTextToHex(txt);
                informacionEnvio = informacionEnvio + "^AOR^FO" + String.valueOf(iE_posXY.x - iE_interlineado * numLineasInfoEnvio) + "," + String.valueOf(iE_posXY.y) + "^FH^FD" + txt + "^FS\n";
                numLineasInfoEnvio++;
            }
        }
        if (!txtEmail.getText().isEmpty()) {
            for (String txt : justificarTexto("Email: " + txtEmail.getText(), iE_alturaFuente, anchoEnPixeles)) {
                txt = Utils.converTextToHex(txt);
                informacionEnvio = informacionEnvio + "^AOR^FO" + String.valueOf(iE_posXY.x - iE_interlineado * numLineasInfoEnvio) + "," + String.valueOf(iE_posXY.y) + "^FH^FD" + txt + "^FS\n";
                numLineasInfoEnvio++;
            }
        }
        if (!txtDireccion.getText().isEmpty()) {
            for (String txt : justificarTexto("Dir: " + txtDireccion.getText() + ", " + txtCiudad.getText() + "-" + txtProvincia.getText(), iE_alturaFuente, anchoEnPixeles)) {
                txt = Utils.converTextToHex(txt);
                informacionEnvio = informacionEnvio + "^AOR^FO" + String.valueOf(iE_posXY.x - iE_interlineado * numLineasInfoEnvio) + "," + String.valueOf(iE_posXY.y) + "^FH^FD" + txt + "^FS\n";
                numLineasInfoEnvio++;
            }
        }
        if (!txtMasInformacion.getText().isEmpty()) {
            for (String txt : justificarTexto(txtMasInformacion.getText(), iE_alturaFuente, anchoEnPixeles)) {
                txt = Utils.converTextToHex(txt);
                informacionEnvio = informacionEnvio + "^AOR^FO" + String.valueOf(iE_posXY.x - iE_interlineado * numLineasInfoEnvio) + "," + String.valueOf(iE_posXY.y) + "^FH^FD" + txt + "^FS\n";
                numLineasInfoEnvio++;
            }
        }

        return informacionEnvio;
    }

    private String getInformacionContenido(int iC_alturaFuente, int iC_interlineado, Point iC_posXY) {
        // Si no se imprime la informacion de codigo de barras entonces se puede 
        // aprovechar todo el ancho de la etiqueta para imprimir la informacion 
        // de contenido.
        int anchoEnPixeles = this.ckbCodigoBarras.isSelected() ? 490 : 780;
        String informacionContenido = "";
        numLineasInfoCont = 0;

        if (!txtInfoCont.getText().isEmpty()) {
            for (String txt : justificarTexto(txtInfoCont.getText(), iC_alturaFuente, anchoEnPixeles)) {
                txt = Utils.converTextToHex(txt);
                informacionContenido = informacionContenido + "^AOR^FO" + String.valueOf(iC_posXY.x - iC_interlineado * numLineasInfoCont) + "," + String.valueOf(iC_posXY.y) + "^FH^FD" + txt + "^FS\n";
                numLineasInfoCont++;
            }
        }

        return informacionContenido;
    }

    private ArrayList<String> justificarTexto(String cadena, int altoFuente, int anchoEnPixeles) {
        ArrayList<String> texto = new ArrayList<>();
        Font fuente = new Font("Swis721 BlkCn BT", Font.PLAIN, altoFuente);
        JTextArea aux = new JTextArea(cadena);
        aux.setFont(fuente);
        byte bytes[] = cadena.getBytes();
        int inicioLinea = 0;
        int posEspacio = 0;

        // Recorro la cadena, mido que cada linea no supere anchoMaximoLinea (en pixeles)
        for (int k = 0; k < cadena.length(); k++) {
            int anchoLinea = aux.getFontMetrics(fuente).bytesWidth(bytes, inicioLinea, k - inicioLinea);
            if (cadena.charAt(k) == ' ') {
                posEspacio = k;
            }

            // Separo la cadena de texto en varias lineas, de modeo que que texto 
            // permanezca solo dentro del area de informacion.
            if (anchoLinea >= anchoEnPixeles || cadena.charAt(k) == '\n') {
                // Aseguro que la separacion de las lineas se haga en los espacios entre 
                // palabras.
                if (cadena.charAt(k) != ' ' && posEspacio > inicioLinea && cadena.charAt(k) != '\n') {
                    k = posEspacio;
                }
//                System.out.println(cadena.substring(inicioLinea, k + 1) + "   " + anchoLinea);
                texto.add(cadena.substring(inicioLinea, k + 1));
                inicioLinea = k + 1;
            }
        }
//        System.out.println(cadena.substring(inicioLinea, cadena.length()));
        texto.add(cadena.substring(inicioLinea, cadena.length()));
        return texto;
    }

    private String getFecha() {
        Calendar c = Calendar.getInstance();
        String dia = Integer.toString(c.get(Calendar.DATE));
        String mes = Integer.toString(c.get(Calendar.MONTH));
        String anyo = Integer.toString(c.get(Calendar.YEAR));
        switch (mes) {
            case "0":
                mes = "ene";
                break;
            case "1":
                mes = "feb";
                break;
            case "2":
                mes = "mar";
                break;
            case "3":
                mes = "abr";
                break;
            case "4":
                mes = "may";
                break;
            case "5":
                mes = "jun";
                break;
            case "6":
                mes = "jul";
                break;
            case "7":
                mes = "ago";
                break;
            case "8":
                mes = "sep";
                break;
            case "9":
                mes = "oct";
                break;
            case "10":
                mes = "nov";
                break;
            case "11":
                mes = "dic";
                break;
        }
        return mes + " " + dia + " de " + anyo;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtImprimir;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JCheckBox ckbCodigoBarras;
    private javax.swing.JCheckBox ckbFechaEnvio;
    private javax.swing.JCheckBox ckbLogoEnvioFragil;
    private javax.swing.JComboBox<String> cmbDriverImpresora;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtCiudad;
    private javax.swing.JTextField txtCodigoBarras;
    private javax.swing.JTextField txtCoincidenciaHist;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextArea txtInfoCont;
    private javax.swing.JTextArea txtMasInformacion;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtProvincia;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
